// Code generated by protoc-gen-go. DO NOT EDIT.
// source: synerex.proto

package synerex_api // import "github.com/synerex/synerex_api"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import duration "github.com/golang/protobuf/ptypes/duration"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GatewayType int32

const (
	GatewayType_BIDIRECTIONAL GatewayType = 0
	GatewayType_WRITE_ONLY    GatewayType = 1
	GatewayType_READ_ONLY     GatewayType = 2
)

var GatewayType_name = map[int32]string{
	0: "BIDIRECTIONAL",
	1: "WRITE_ONLY",
	2: "READ_ONLY",
}
var GatewayType_value = map[string]int32{
	"BIDIRECTIONAL": 0,
	"WRITE_ONLY":    1,
	"READ_ONLY":     2,
}

func (x GatewayType) String() string {
	return proto.EnumName(GatewayType_name, int32(x))
}
func (GatewayType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_synerex_e2c6cb0f4e2f182a, []int{0}
}

type MsgType int32

const (
	MsgType_DEMAND  MsgType = 0
	MsgType_SUPPLY  MsgType = 1
	MsgType_TARGET  MsgType = 2
	MsgType_MBUS    MsgType = 3
	MsgType_MBUSMSG MsgType = 4
)

var MsgType_name = map[int32]string{
	0: "DEMAND",
	1: "SUPPLY",
	2: "TARGET",
	3: "MBUS",
	4: "MBUSMSG",
}
var MsgType_value = map[string]int32{
	"DEMAND":  0,
	"SUPPLY":  1,
	"TARGET":  2,
	"MBUS":    3,
	"MBUSMSG": 4,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_synerex_e2c6cb0f4e2f182a, []int{1}
}

type Response struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_synerex_e2c6cb0f4e2f182a, []int{0}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Response) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ConfirmResponse struct {
	Ok                   bool               `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	MbusId               uint64             `protobuf:"fixed64,2,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	Wait                 *duration.Duration `protobuf:"bytes,3,opt,name=wait,proto3" json:"wait,omitempty"`
	Err                  string             `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ConfirmResponse) Reset()         { *m = ConfirmResponse{} }
func (m *ConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*ConfirmResponse) ProtoMessage()    {}
func (*ConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_synerex_e2c6cb0f4e2f182a, []int{1}
}
func (m *ConfirmResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfirmResponse.Unmarshal(m, b)
}
func (m *ConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfirmResponse.Marshal(b, m, deterministic)
}
func (dst *ConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmResponse.Merge(dst, src)
}
func (m *ConfirmResponse) XXX_Size() int {
	return xxx_messageInfo_ConfirmResponse.Size(m)
}
func (m *ConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmResponse proto.InternalMessageInfo

func (m *ConfirmResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ConfirmResponse) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

func (m *ConfirmResponse) GetWait() *duration.Duration {
	if m != nil {
		return m.Wait
	}
	return nil
}

func (m *ConfirmResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type Content struct {
	Entity               []byte   `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_synerex_e2c6cb0f4e2f182a, []int{2}
}
func (m *Content) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Content.Unmarshal(m, b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Content.Marshal(b, m, deterministic)
}
func (dst *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(dst, src)
}
func (m *Content) XXX_Size() int {
	return xxx_messageInfo_Content.Size(m)
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetEntity() []byte {
	if m != nil {
		return m.Entity
	}
	return nil
}

type Supply struct {
	Id                   uint64               `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId             uint64               `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId             uint64               `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	ChannelType          uint32               `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	SupplyName           string               `protobuf:"bytes,5,opt,name=supply_name,json=supplyName,proto3" json:"supply_name,omitempty"`
	Ts                   *timestamp.Timestamp `protobuf:"bytes,6,opt,name=ts,proto3" json:"ts,omitempty"`
	ArgJson              string               `protobuf:"bytes,7,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	MbusId               uint64               `protobuf:"fixed64,8,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	Cdata                *Content             `protobuf:"bytes,9,opt,name=cdata,proto3" json:"cdata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Supply) Reset()         { *m = Supply{} }
func (m *Supply) String() string { return proto.CompactTextString(m) }
func (*Supply) ProtoMessage()    {}
func (*Supply) Descriptor() ([]byte, []int) {
	return fileDescriptor_synerex_e2c6cb0f4e2f182a, []int{3}
}
func (m *Supply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Supply.Unmarshal(m, b)
}
func (m *Supply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Supply.Marshal(b, m, deterministic)
}
func (dst *Supply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Supply.Merge(dst, src)
}
func (m *Supply) XXX_Size() int {
	return xxx_messageInfo_Supply.Size(m)
}
func (m *Supply) XXX_DiscardUnknown() {
	xxx_messageInfo_Supply.DiscardUnknown(m)
}

var xxx_messageInfo_Supply proto.InternalMessageInfo

func (m *Supply) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Supply) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *Supply) GetTargetId() uint64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *Supply) GetChannelType() uint32 {
	if m != nil {
		return m.ChannelType
	}
	return 0
}

func (m *Supply) GetSupplyName() string {
	if m != nil {
		return m.SupplyName
	}
	return ""
}

func (m *Supply) GetTs() *timestamp.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *Supply) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

func (m *Supply) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

func (m *Supply) GetCdata() *Content {
	if m != nil {
		return m.Cdata
	}
	return nil
}

type Demand struct {
	Id                   uint64               `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId             uint64               `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId             uint64               `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	ChannelType          uint32               `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	DemandName           string               `protobuf:"bytes,5,opt,name=demand_name,json=demandName,proto3" json:"demand_name,omitempty"`
	Ts                   *timestamp.Timestamp `protobuf:"bytes,6,opt,name=ts,proto3" json:"ts,omitempty"`
	ArgJson              string               `protobuf:"bytes,7,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	MbusId               uint64               `protobuf:"fixed64,8,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	Cdata                *Content             `protobuf:"bytes,9,opt,name=cdata,proto3" json:"cdata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Demand) Reset()         { *m = Demand{} }
func (m *Demand) String() string { return proto.CompactTextString(m) }
func (*Demand) ProtoMessage()    {}
func (*Demand) Descriptor() ([]byte, []int) {
	return fileDescriptor_synerex_e2c6cb0f4e2f182a, []int{4}
}
func (m *Demand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Demand.Unmarshal(m, b)
}
func (m *Demand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Demand.Marshal(b, m, deterministic)
}
func (dst *Demand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Demand.Merge(dst, src)
}
func (m *Demand) XXX_Size() int {
	return xxx_messageInfo_Demand.Size(m)
}
func (m *Demand) XXX_DiscardUnknown() {
	xxx_messageInfo_Demand.DiscardUnknown(m)
}

var xxx_messageInfo_Demand proto.InternalMessageInfo

func (m *Demand) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Demand) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *Demand) GetTargetId() uint64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *Demand) GetChannelType() uint32 {
	if m != nil {
		return m.ChannelType
	}
	return 0
}

func (m *Demand) GetDemandName() string {
	if m != nil {
		return m.DemandName
	}
	return ""
}

func (m *Demand) GetTs() *timestamp.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *Demand) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

func (m *Demand) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

func (m *Demand) GetCdata() *Content {
	if m != nil {
		return m.Cdata
	}
	return nil
}

type Target struct {
	Id                   uint64             `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId             uint64             `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId             uint64             `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	ChannelType          uint32             `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	Wait                 *duration.Duration `protobuf:"bytes,5,opt,name=wait,proto3" json:"wait,omitempty"`
	MbusId               uint64             `protobuf:"fixed64,6,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_synerex_e2c6cb0f4e2f182a, []int{5}
}
func (m *Target) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Target.Unmarshal(m, b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Target.Marshal(b, m, deterministic)
}
func (dst *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(dst, src)
}
func (m *Target) XXX_Size() int {
	return xxx_messageInfo_Target.Size(m)
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

func (m *Target) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Target) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *Target) GetTargetId() uint64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *Target) GetChannelType() uint32 {
	if m != nil {
		return m.ChannelType
	}
	return 0
}

func (m *Target) GetWait() *duration.Duration {
	if m != nil {
		return m.Wait
	}
	return nil
}

func (m *Target) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

type Channel struct {
	ClientId             uint64   `protobuf:"fixed64,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ChannelType          uint32   `protobuf:"varint,2,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	ArgJson              string   `protobuf:"bytes,3,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_synerex_e2c6cb0f4e2f182a, []int{6}
}
func (m *Channel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Channel.Unmarshal(m, b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
}
func (dst *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(dst, src)
}
func (m *Channel) XXX_Size() int {
	return xxx_messageInfo_Channel.Size(m)
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *Channel) GetChannelType() uint32 {
	if m != nil {
		return m.ChannelType
	}
	return 0
}

func (m *Channel) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

type Mbus struct {
	ClientId             uint64   `protobuf:"fixed64,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	MbusId               uint64   `protobuf:"fixed64,2,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	ArgJson              string   `protobuf:"bytes,3,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Mbus) Reset()         { *m = Mbus{} }
func (m *Mbus) String() string { return proto.CompactTextString(m) }
func (*Mbus) ProtoMessage()    {}
func (*Mbus) Descriptor() ([]byte, []int) {
	return fileDescriptor_synerex_e2c6cb0f4e2f182a, []int{7}
}
func (m *Mbus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mbus.Unmarshal(m, b)
}
func (m *Mbus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mbus.Marshal(b, m, deterministic)
}
func (dst *Mbus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mbus.Merge(dst, src)
}
func (m *Mbus) XXX_Size() int {
	return xxx_messageInfo_Mbus.Size(m)
}
func (m *Mbus) XXX_DiscardUnknown() {
	xxx_messageInfo_Mbus.DiscardUnknown(m)
}

var xxx_messageInfo_Mbus proto.InternalMessageInfo

func (m *Mbus) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *Mbus) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

func (m *Mbus) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

type MbusMsg struct {
	MsgId                uint64   `protobuf:"fixed64,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	SenderId             uint64   `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId             uint64   `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	MbusId               uint64   `protobuf:"fixed64,4,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	MsgType              uint32   `protobuf:"varint,5,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
	MsgInfo              string   `protobuf:"bytes,6,opt,name=msg_info,json=msgInfo,proto3" json:"msg_info,omitempty"`
	ArgJson              string   `protobuf:"bytes,7,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MbusMsg) Reset()         { *m = MbusMsg{} }
func (m *MbusMsg) String() string { return proto.CompactTextString(m) }
func (*MbusMsg) ProtoMessage()    {}
func (*MbusMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_synerex_e2c6cb0f4e2f182a, []int{8}
}
func (m *MbusMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MbusMsg.Unmarshal(m, b)
}
func (m *MbusMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MbusMsg.Marshal(b, m, deterministic)
}
func (dst *MbusMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MbusMsg.Merge(dst, src)
}
func (m *MbusMsg) XXX_Size() int {
	return xxx_messageInfo_MbusMsg.Size(m)
}
func (m *MbusMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_MbusMsg.DiscardUnknown(m)
}

var xxx_messageInfo_MbusMsg proto.InternalMessageInfo

func (m *MbusMsg) GetMsgId() uint64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *MbusMsg) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *MbusMsg) GetTargetId() uint64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *MbusMsg) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

func (m *MbusMsg) GetMsgType() uint32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *MbusMsg) GetMsgInfo() string {
	if m != nil {
		return m.MsgInfo
	}
	return ""
}

func (m *MbusMsg) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

type GatewayInfo struct {
	ClientId             uint64      `protobuf:"fixed64,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	GatewayType          GatewayType `protobuf:"varint,2,opt,name=gateway_type,json=gatewayType,proto3,enum=api.GatewayType" json:"gateway_type,omitempty"`
	Channels             []uint32    `protobuf:"varint,3,rep,packed,name=channels,proto3" json:"channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GatewayInfo) Reset()         { *m = GatewayInfo{} }
func (m *GatewayInfo) String() string { return proto.CompactTextString(m) }
func (*GatewayInfo) ProtoMessage()    {}
func (*GatewayInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_synerex_e2c6cb0f4e2f182a, []int{9}
}
func (m *GatewayInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayInfo.Unmarshal(m, b)
}
func (m *GatewayInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayInfo.Marshal(b, m, deterministic)
}
func (dst *GatewayInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayInfo.Merge(dst, src)
}
func (m *GatewayInfo) XXX_Size() int {
	return xxx_messageInfo_GatewayInfo.Size(m)
}
func (m *GatewayInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayInfo proto.InternalMessageInfo

func (m *GatewayInfo) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *GatewayInfo) GetGatewayType() GatewayType {
	if m != nil {
		return m.GatewayType
	}
	return GatewayType_BIDIRECTIONAL
}

func (m *GatewayInfo) GetChannels() []uint32 {
	if m != nil {
		return m.Channels
	}
	return nil
}

// Subscribe from Gateway to SynerexServer
type GatewayMsg struct {
	SrcSynerexId uint64  `protobuf:"fixed64,1,opt,name=src_synerex_id,json=srcSynerexId,proto3" json:"src_synerex_id,omitempty"`
	MsgType      MsgType `protobuf:"varint,2,opt,name=msg_type,json=msgType,proto3,enum=api.MsgType" json:"msg_type,omitempty"`
	// Types that are valid to be assigned to MsgOneof:
	//	*GatewayMsg_Demand
	//	*GatewayMsg_Supply
	//	*GatewayMsg_Target
	//	*GatewayMsg_Mbus
	//	*GatewayMsg_MbusMsg
	MsgOneof             isGatewayMsg_MsgOneof `protobuf_oneof:"msg_oneof"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GatewayMsg) Reset()         { *m = GatewayMsg{} }
func (m *GatewayMsg) String() string { return proto.CompactTextString(m) }
func (*GatewayMsg) ProtoMessage()    {}
func (*GatewayMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_synerex_e2c6cb0f4e2f182a, []int{10}
}
func (m *GatewayMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayMsg.Unmarshal(m, b)
}
func (m *GatewayMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayMsg.Marshal(b, m, deterministic)
}
func (dst *GatewayMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayMsg.Merge(dst, src)
}
func (m *GatewayMsg) XXX_Size() int {
	return xxx_messageInfo_GatewayMsg.Size(m)
}
func (m *GatewayMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayMsg proto.InternalMessageInfo

func (m *GatewayMsg) GetSrcSynerexId() uint64 {
	if m != nil {
		return m.SrcSynerexId
	}
	return 0
}

func (m *GatewayMsg) GetMsgType() MsgType {
	if m != nil {
		return m.MsgType
	}
	return MsgType_DEMAND
}

type isGatewayMsg_MsgOneof interface {
	isGatewayMsg_MsgOneof()
}

type GatewayMsg_Demand struct {
	Demand *Demand `protobuf:"bytes,3,opt,name=demand,proto3,oneof"`
}

type GatewayMsg_Supply struct {
	Supply *Supply `protobuf:"bytes,4,opt,name=supply,proto3,oneof"`
}

type GatewayMsg_Target struct {
	Target *Target `protobuf:"bytes,5,opt,name=target,proto3,oneof"`
}

type GatewayMsg_Mbus struct {
	Mbus *Mbus `protobuf:"bytes,6,opt,name=mbus,proto3,oneof"`
}

type GatewayMsg_MbusMsg struct {
	MbusMsg *MbusMsg `protobuf:"bytes,7,opt,name=mbus_msg,json=mbusMsg,proto3,oneof"`
}

func (*GatewayMsg_Demand) isGatewayMsg_MsgOneof() {}

func (*GatewayMsg_Supply) isGatewayMsg_MsgOneof() {}

func (*GatewayMsg_Target) isGatewayMsg_MsgOneof() {}

func (*GatewayMsg_Mbus) isGatewayMsg_MsgOneof() {}

func (*GatewayMsg_MbusMsg) isGatewayMsg_MsgOneof() {}

func (m *GatewayMsg) GetMsgOneof() isGatewayMsg_MsgOneof {
	if m != nil {
		return m.MsgOneof
	}
	return nil
}

func (m *GatewayMsg) GetDemand() *Demand {
	if x, ok := m.GetMsgOneof().(*GatewayMsg_Demand); ok {
		return x.Demand
	}
	return nil
}

func (m *GatewayMsg) GetSupply() *Supply {
	if x, ok := m.GetMsgOneof().(*GatewayMsg_Supply); ok {
		return x.Supply
	}
	return nil
}

func (m *GatewayMsg) GetTarget() *Target {
	if x, ok := m.GetMsgOneof().(*GatewayMsg_Target); ok {
		return x.Target
	}
	return nil
}

func (m *GatewayMsg) GetMbus() *Mbus {
	if x, ok := m.GetMsgOneof().(*GatewayMsg_Mbus); ok {
		return x.Mbus
	}
	return nil
}

func (m *GatewayMsg) GetMbusMsg() *MbusMsg {
	if x, ok := m.GetMsgOneof().(*GatewayMsg_MbusMsg); ok {
		return x.MbusMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GatewayMsg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GatewayMsg_OneofMarshaler, _GatewayMsg_OneofUnmarshaler, _GatewayMsg_OneofSizer, []interface{}{
		(*GatewayMsg_Demand)(nil),
		(*GatewayMsg_Supply)(nil),
		(*GatewayMsg_Target)(nil),
		(*GatewayMsg_Mbus)(nil),
		(*GatewayMsg_MbusMsg)(nil),
	}
}

func _GatewayMsg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GatewayMsg)
	// msg_oneof
	switch x := m.MsgOneof.(type) {
	case *GatewayMsg_Demand:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Demand); err != nil {
			return err
		}
	case *GatewayMsg_Supply:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Supply); err != nil {
			return err
		}
	case *GatewayMsg_Target:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Target); err != nil {
			return err
		}
	case *GatewayMsg_Mbus:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mbus); err != nil {
			return err
		}
	case *GatewayMsg_MbusMsg:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MbusMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GatewayMsg.MsgOneof has unexpected type %T", x)
	}
	return nil
}

func _GatewayMsg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GatewayMsg)
	switch tag {
	case 3: // msg_oneof.demand
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Demand)
		err := b.DecodeMessage(msg)
		m.MsgOneof = &GatewayMsg_Demand{msg}
		return true, err
	case 4: // msg_oneof.supply
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Supply)
		err := b.DecodeMessage(msg)
		m.MsgOneof = &GatewayMsg_Supply{msg}
		return true, err
	case 5: // msg_oneof.target
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Target)
		err := b.DecodeMessage(msg)
		m.MsgOneof = &GatewayMsg_Target{msg}
		return true, err
	case 6: // msg_oneof.mbus
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Mbus)
		err := b.DecodeMessage(msg)
		m.MsgOneof = &GatewayMsg_Mbus{msg}
		return true, err
	case 7: // msg_oneof.mbus_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MbusMsg)
		err := b.DecodeMessage(msg)
		m.MsgOneof = &GatewayMsg_MbusMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GatewayMsg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GatewayMsg)
	// msg_oneof
	switch x := m.MsgOneof.(type) {
	case *GatewayMsg_Demand:
		s := proto.Size(x.Demand)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GatewayMsg_Supply:
		s := proto.Size(x.Supply)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GatewayMsg_Target:
		s := proto.Size(x.Target)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GatewayMsg_Mbus:
		s := proto.Size(x.Mbus)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GatewayMsg_MbusMsg:
		s := proto.Size(x.MbusMsg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ProviderID struct {
	ClientId             uint64   `protobuf:"fixed64,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ArgJson              string   `protobuf:"bytes,3,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProviderID) Reset()         { *m = ProviderID{} }
func (m *ProviderID) String() string { return proto.CompactTextString(m) }
func (*ProviderID) ProtoMessage()    {}
func (*ProviderID) Descriptor() ([]byte, []int) {
	return fileDescriptor_synerex_e2c6cb0f4e2f182a, []int{11}
}
func (m *ProviderID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProviderID.Unmarshal(m, b)
}
func (m *ProviderID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProviderID.Marshal(b, m, deterministic)
}
func (dst *ProviderID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderID.Merge(dst, src)
}
func (m *ProviderID) XXX_Size() int {
	return xxx_messageInfo_ProviderID.Size(m)
}
func (m *ProviderID) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderID.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderID proto.InternalMessageInfo

func (m *ProviderID) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *ProviderID) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

func init() {
	proto.RegisterType((*Response)(nil), "api.Response")
	proto.RegisterType((*ConfirmResponse)(nil), "api.ConfirmResponse")
	proto.RegisterType((*Content)(nil), "api.Content")
	proto.RegisterType((*Supply)(nil), "api.Supply")
	proto.RegisterType((*Demand)(nil), "api.Demand")
	proto.RegisterType((*Target)(nil), "api.Target")
	proto.RegisterType((*Channel)(nil), "api.Channel")
	proto.RegisterType((*Mbus)(nil), "api.Mbus")
	proto.RegisterType((*MbusMsg)(nil), "api.MbusMsg")
	proto.RegisterType((*GatewayInfo)(nil), "api.GatewayInfo")
	proto.RegisterType((*GatewayMsg)(nil), "api.GatewayMsg")
	proto.RegisterType((*ProviderID)(nil), "api.ProviderID")
	proto.RegisterEnum("api.GatewayType", GatewayType_name, GatewayType_value)
	proto.RegisterEnum("api.MsgType", MsgType_name, MsgType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SynerexClient is the client API for Synerex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SynerexClient interface {
	NotifyDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error)
	NotifySupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error)
	ProposeDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error)
	ProposeSupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error)
	SelectSupply(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error)
	SelectDemand(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error)
	Confirm(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Response, error)
	SubscribeDemand(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Synerex_SubscribeDemandClient, error)
	SubscribeSupply(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Synerex_SubscribeSupplyClient, error)
	SubscribeMbus(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (Synerex_SubscribeMbusClient, error)
	SendMsg(ctx context.Context, in *MbusMsg, opts ...grpc.CallOption) (*Response, error)
	CloseMbus(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (*Response, error)
	SubscribeGateway(ctx context.Context, in *GatewayInfo, opts ...grpc.CallOption) (Synerex_SubscribeGatewayClient, error)
	ForwardToGateway(ctx context.Context, in *GatewayMsg, opts ...grpc.CallOption) (*Response, error)
	CloseDemandChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Response, error)
	CloseSupplyChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Response, error)
	CloseAllChannels(ctx context.Context, in *ProviderID, opts ...grpc.CallOption) (*Response, error)
}

type synerexClient struct {
	cc *grpc.ClientConn
}

func NewSynerexClient(cc *grpc.ClientConn) SynerexClient {
	return &synerexClient{cc}
}

func (c *synerexClient) NotifyDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/NotifyDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) NotifySupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/NotifySupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) ProposeDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/ProposeDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) ProposeSupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/ProposeSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SelectSupply(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, "/api.Synerex/SelectSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SelectDemand(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, "/api.Synerex/SelectDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) Confirm(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/Confirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SubscribeDemand(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Synerex_SubscribeDemandClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synerex_serviceDesc.Streams[0], "/api.Synerex/SubscribeDemand", opts...)
	if err != nil {
		return nil, err
	}
	x := &synerexSubscribeDemandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synerex_SubscribeDemandClient interface {
	Recv() (*Demand, error)
	grpc.ClientStream
}

type synerexSubscribeDemandClient struct {
	grpc.ClientStream
}

func (x *synerexSubscribeDemandClient) Recv() (*Demand, error) {
	m := new(Demand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synerexClient) SubscribeSupply(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Synerex_SubscribeSupplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synerex_serviceDesc.Streams[1], "/api.Synerex/SubscribeSupply", opts...)
	if err != nil {
		return nil, err
	}
	x := &synerexSubscribeSupplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synerex_SubscribeSupplyClient interface {
	Recv() (*Supply, error)
	grpc.ClientStream
}

type synerexSubscribeSupplyClient struct {
	grpc.ClientStream
}

func (x *synerexSubscribeSupplyClient) Recv() (*Supply, error) {
	m := new(Supply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synerexClient) SubscribeMbus(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (Synerex_SubscribeMbusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synerex_serviceDesc.Streams[2], "/api.Synerex/SubscribeMbus", opts...)
	if err != nil {
		return nil, err
	}
	x := &synerexSubscribeMbusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synerex_SubscribeMbusClient interface {
	Recv() (*MbusMsg, error)
	grpc.ClientStream
}

type synerexSubscribeMbusClient struct {
	grpc.ClientStream
}

func (x *synerexSubscribeMbusClient) Recv() (*MbusMsg, error) {
	m := new(MbusMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synerexClient) SendMsg(ctx context.Context, in *MbusMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) CloseMbus(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/CloseMbus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SubscribeGateway(ctx context.Context, in *GatewayInfo, opts ...grpc.CallOption) (Synerex_SubscribeGatewayClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synerex_serviceDesc.Streams[3], "/api.Synerex/SubscribeGateway", opts...)
	if err != nil {
		return nil, err
	}
	x := &synerexSubscribeGatewayClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synerex_SubscribeGatewayClient interface {
	Recv() (*GatewayMsg, error)
	grpc.ClientStream
}

type synerexSubscribeGatewayClient struct {
	grpc.ClientStream
}

func (x *synerexSubscribeGatewayClient) Recv() (*GatewayMsg, error) {
	m := new(GatewayMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synerexClient) ForwardToGateway(ctx context.Context, in *GatewayMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/ForwardToGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) CloseDemandChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/CloseDemandChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) CloseSupplyChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/CloseSupplyChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) CloseAllChannels(ctx context.Context, in *ProviderID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/CloseAllChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SynerexServer is the server API for Synerex service.
type SynerexServer interface {
	NotifyDemand(context.Context, *Demand) (*Response, error)
	NotifySupply(context.Context, *Supply) (*Response, error)
	ProposeDemand(context.Context, *Demand) (*Response, error)
	ProposeSupply(context.Context, *Supply) (*Response, error)
	SelectSupply(context.Context, *Target) (*ConfirmResponse, error)
	SelectDemand(context.Context, *Target) (*ConfirmResponse, error)
	Confirm(context.Context, *Target) (*Response, error)
	SubscribeDemand(*Channel, Synerex_SubscribeDemandServer) error
	SubscribeSupply(*Channel, Synerex_SubscribeSupplyServer) error
	SubscribeMbus(*Mbus, Synerex_SubscribeMbusServer) error
	SendMsg(context.Context, *MbusMsg) (*Response, error)
	CloseMbus(context.Context, *Mbus) (*Response, error)
	SubscribeGateway(*GatewayInfo, Synerex_SubscribeGatewayServer) error
	ForwardToGateway(context.Context, *GatewayMsg) (*Response, error)
	CloseDemandChannel(context.Context, *Channel) (*Response, error)
	CloseSupplyChannel(context.Context, *Channel) (*Response, error)
	CloseAllChannels(context.Context, *ProviderID) (*Response, error)
}

func RegisterSynerexServer(s *grpc.Server, srv SynerexServer) {
	s.RegisterService(&_Synerex_serviceDesc, srv)
}

func _Synerex_NotifyDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Demand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).NotifyDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/NotifyDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).NotifyDemand(ctx, req.(*Demand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_NotifySupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Supply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).NotifySupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/NotifySupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).NotifySupply(ctx, req.(*Supply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_ProposeDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Demand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).ProposeDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/ProposeDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).ProposeDemand(ctx, req.(*Demand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_ProposeSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Supply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).ProposeSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/ProposeSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).ProposeSupply(ctx, req.(*Supply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SelectSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).SelectSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/SelectSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).SelectSupply(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SelectDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).SelectDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/SelectDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).SelectDemand(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).Confirm(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SubscribeDemand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynerexServer).SubscribeDemand(m, &synerexSubscribeDemandServer{stream})
}

type Synerex_SubscribeDemandServer interface {
	Send(*Demand) error
	grpc.ServerStream
}

type synerexSubscribeDemandServer struct {
	grpc.ServerStream
}

func (x *synerexSubscribeDemandServer) Send(m *Demand) error {
	return x.ServerStream.SendMsg(m)
}

func _Synerex_SubscribeSupply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynerexServer).SubscribeSupply(m, &synerexSubscribeSupplyServer{stream})
}

type Synerex_SubscribeSupplyServer interface {
	Send(*Supply) error
	grpc.ServerStream
}

type synerexSubscribeSupplyServer struct {
	grpc.ServerStream
}

func (x *synerexSubscribeSupplyServer) Send(m *Supply) error {
	return x.ServerStream.SendMsg(m)
}

func _Synerex_SubscribeMbus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Mbus)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynerexServer).SubscribeMbus(m, &synerexSubscribeMbusServer{stream})
}

type Synerex_SubscribeMbusServer interface {
	Send(*MbusMsg) error
	grpc.ServerStream
}

type synerexSubscribeMbusServer struct {
	grpc.ServerStream
}

func (x *synerexSubscribeMbusServer) Send(m *MbusMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Synerex_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MbusMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).SendMsg(ctx, req.(*MbusMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_CloseMbus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mbus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).CloseMbus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/CloseMbus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).CloseMbus(ctx, req.(*Mbus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SubscribeGateway_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GatewayInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynerexServer).SubscribeGateway(m, &synerexSubscribeGatewayServer{stream})
}

type Synerex_SubscribeGatewayServer interface {
	Send(*GatewayMsg) error
	grpc.ServerStream
}

type synerexSubscribeGatewayServer struct {
	grpc.ServerStream
}

func (x *synerexSubscribeGatewayServer) Send(m *GatewayMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Synerex_ForwardToGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).ForwardToGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/ForwardToGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).ForwardToGateway(ctx, req.(*GatewayMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_CloseDemandChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).CloseDemandChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/CloseDemandChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).CloseDemandChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_CloseSupplyChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).CloseSupplyChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/CloseSupplyChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).CloseSupplyChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_CloseAllChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).CloseAllChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/CloseAllChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).CloseAllChannels(ctx, req.(*ProviderID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Synerex_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Synerex",
	HandlerType: (*SynerexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyDemand",
			Handler:    _Synerex_NotifyDemand_Handler,
		},
		{
			MethodName: "NotifySupply",
			Handler:    _Synerex_NotifySupply_Handler,
		},
		{
			MethodName: "ProposeDemand",
			Handler:    _Synerex_ProposeDemand_Handler,
		},
		{
			MethodName: "ProposeSupply",
			Handler:    _Synerex_ProposeSupply_Handler,
		},
		{
			MethodName: "SelectSupply",
			Handler:    _Synerex_SelectSupply_Handler,
		},
		{
			MethodName: "SelectDemand",
			Handler:    _Synerex_SelectDemand_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _Synerex_Confirm_Handler,
		},
		{
			MethodName: "SendMsg",
			Handler:    _Synerex_SendMsg_Handler,
		},
		{
			MethodName: "CloseMbus",
			Handler:    _Synerex_CloseMbus_Handler,
		},
		{
			MethodName: "ForwardToGateway",
			Handler:    _Synerex_ForwardToGateway_Handler,
		},
		{
			MethodName: "CloseDemandChannel",
			Handler:    _Synerex_CloseDemandChannel_Handler,
		},
		{
			MethodName: "CloseSupplyChannel",
			Handler:    _Synerex_CloseSupplyChannel_Handler,
		},
		{
			MethodName: "CloseAllChannels",
			Handler:    _Synerex_CloseAllChannels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeDemand",
			Handler:       _Synerex_SubscribeDemand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeSupply",
			Handler:       _Synerex_SubscribeSupply_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMbus",
			Handler:       _Synerex_SubscribeMbus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeGateway",
			Handler:       _Synerex_SubscribeGateway_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "synerex.proto",
}

func init() { proto.RegisterFile("synerex.proto", fileDescriptor_synerex_e2c6cb0f4e2f182a) }

var fileDescriptor_synerex_e2c6cb0f4e2f182a = []byte{
	// 1049 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xdd, 0x6e, 0xe2, 0x46,
	0x14, 0x06, 0x43, 0x6c, 0x38, 0x40, 0xe2, 0x8e, 0xfa, 0xc3, 0x52, 0x69, 0xc3, 0x5a, 0xad, 0x42,
	0xa3, 0x2c, 0x59, 0x25, 0x7b, 0xd3, 0xab, 0x8a, 0x00, 0x4d, 0x5c, 0x2d, 0x6c, 0x64, 0x58, 0xad,
	0xda, 0x1b, 0x64, 0xf0, 0xe0, 0x75, 0x17, 0x7b, 0x2c, 0x8f, 0x69, 0x8a, 0xf6, 0x4d, 0xfa, 0x06,
	0x7d, 0x88, 0xde, 0xf5, 0xb2, 0x0f, 0x55, 0xcd, 0x8f, 0x63, 0x3b, 0x24, 0x34, 0x52, 0xa5, 0xd5,
	0x5e, 0xe1, 0x39, 0xe7, 0x3b, 0x33, 0xdf, 0x7c, 0xe7, 0x67, 0x80, 0x06, 0xdd, 0x04, 0x38, 0xc2,
	0xbf, 0x77, 0xc3, 0x88, 0xc4, 0x04, 0x95, 0xec, 0xd0, 0x6b, 0x1d, 0xba, 0x84, 0xb8, 0x2b, 0x7c,
	0xca, 0x4d, 0xf3, 0xf5, 0xf2, 0x34, 0xf6, 0x7c, 0x4c, 0x63, 0xdb, 0x0f, 0x05, 0xaa, 0xf5, 0xf4,
	0x2e, 0xc0, 0x59, 0x47, 0x76, 0xec, 0x91, 0x40, 0xf8, 0x8d, 0x13, 0xa8, 0x58, 0x98, 0x86, 0x24,
	0xa0, 0x18, 0xed, 0x83, 0x42, 0xde, 0x37, 0x8b, 0xed, 0x62, 0xa7, 0x62, 0x29, 0xe4, 0x3d, 0xd2,
	0xa1, 0x84, 0xa3, 0xa8, 0xa9, 0xb4, 0x8b, 0x9d, 0xaa, 0xc5, 0x3e, 0x8d, 0x0f, 0x70, 0xd0, 0x27,
	0xc1, 0xd2, 0x8b, 0xfc, 0x07, 0x83, 0xbe, 0x02, 0xcd, 0x9f, 0xaf, 0xe9, 0xcc, 0x73, 0x78, 0xa0,
	0x6a, 0xa9, 0x6c, 0x69, 0x3a, 0xe8, 0x39, 0x94, 0x6f, 0x6c, 0x2f, 0x6e, 0x96, 0xda, 0xc5, 0x4e,
	0xed, 0xec, 0x49, 0x57, 0x10, 0xeb, 0x26, 0xc4, 0xba, 0x03, 0x49, 0xcc, 0xe2, 0xb0, 0xe4, 0xf0,
	0x72, 0x7a, 0xf8, 0x33, 0xd0, 0xfa, 0x24, 0x88, 0x71, 0x10, 0xa3, 0x2f, 0x41, 0xc5, 0x41, 0xec,
	0xc5, 0x1b, 0x7e, 0x70, 0xdd, 0x92, 0x2b, 0xe3, 0x0f, 0x05, 0xd4, 0xc9, 0x3a, 0x0c, 0x57, 0x1b,
	0xc6, 0xcb, 0x73, 0xb8, 0x5b, 0xb5, 0x14, 0xcf, 0x41, 0x5f, 0x43, 0x95, 0xe2, 0xc0, 0xc1, 0x51,
	0xca, 0xac, 0x22, 0x0c, 0x26, 0x77, 0xc6, 0x76, 0xe4, 0xe2, 0x98, 0x39, 0x4b, 0xc2, 0x29, 0x0c,
	0xa6, 0x83, 0x9e, 0x41, 0x7d, 0xf1, 0xce, 0x0e, 0x02, 0xbc, 0x9a, 0xc5, 0x9b, 0x10, 0x73, 0x4a,
	0x0d, 0xab, 0x26, 0x6d, 0xd3, 0x4d, 0x88, 0xd1, 0x21, 0xd4, 0x28, 0x3f, 0x76, 0x16, 0xd8, 0x3e,
	0x6e, 0xee, 0x71, 0xd2, 0x20, 0x4c, 0x63, 0xdb, 0xc7, 0xe8, 0x18, 0x94, 0x98, 0x36, 0x55, 0x7e,
	0xf5, 0xd6, 0xd6, 0xd5, 0xa7, 0x49, 0xd2, 0x2c, 0x25, 0xa6, 0xe8, 0x09, 0x54, 0xec, 0xc8, 0x9d,
	0xfd, 0x4a, 0x49, 0xd0, 0xd4, 0xf8, 0x4e, 0x9a, 0x1d, 0xb9, 0x3f, 0x51, 0x12, 0x64, 0xc5, 0xad,
	0xe4, 0xc4, 0x35, 0x60, 0x6f, 0xe1, 0xd8, 0xb1, 0xdd, 0xac, 0xf2, 0x23, 0xea, 0x5d, 0x3b, 0xf4,
	0xba, 0x52, 0x2d, 0x4b, 0xb8, 0xb8, 0x38, 0x03, 0xec, 0xdb, 0x81, 0xf3, 0xd1, 0xc5, 0x71, 0xf8,
	0xb1, 0x39, 0x71, 0x84, 0xe9, 0x93, 0x11, 0xe7, 0xaf, 0x22, 0xa8, 0x53, 0x7e, 0xa9, 0x8f, 0x2b,
	0x4e, 0xd2, 0x15, 0x7b, 0x8f, 0xeb, 0x8a, 0xcc, 0x1d, 0xd5, 0xec, 0x1d, 0x0d, 0x07, 0xb4, 0xbe,
	0xd8, 0x96, 0x51, 0x5a, 0xac, 0x3c, 0x1c, 0x70, 0x4a, 0xe2, 0x1a, 0x15, 0x61, 0xb8, 0x87, 0x92,
	0xb2, 0x4d, 0x29, 0x2b, 0x71, 0x29, 0x27, 0xb1, 0xf1, 0x16, 0xca, 0xa3, 0xf9, 0x9a, 0xee, 0x3e,
	0xe2, 0xc1, 0x09, 0xb0, 0x63, 0xe3, 0xbf, 0x8b, 0xa0, 0xb1, 0x9d, 0x47, 0xd4, 0x45, 0x5f, 0x80,
	0xea, 0x53, 0x37, 0xdd, 0x79, 0xcf, 0xa7, 0xae, 0xf9, 0x7f, 0xd2, 0x90, 0x21, 0x54, 0xbe, 0x4b,
	0x88, 0x9d, 0xc4, 0x85, 0xd8, 0xe3, 0x42, 0x68, 0x3e, 0x75, 0x13, 0x11, 0x38, 0x89, 0x60, 0x49,
	0xb8, 0xd2, 0x55, 0xee, 0x32, 0x83, 0x25, 0xd9, 0x51, 0x82, 0xc6, 0x07, 0xa8, 0x5d, 0xda, 0x31,
	0xbe, 0xb1, 0x37, 0x1c, 0xb9, 0x53, 0xa6, 0x73, 0xa8, 0xbb, 0x02, 0x9b, 0x66, 0x62, 0xff, 0x4c,
	0xe7, 0xc5, 0x29, 0x37, 0x61, 0x4c, 0xac, 0x9a, 0x9b, 0x2e, 0x50, 0x0b, 0x2a, 0x32, 0x55, 0xb4,
	0x59, 0x6a, 0x97, 0x3a, 0x0d, 0xeb, 0x76, 0x6d, 0xfc, 0xa9, 0x00, 0xc8, 0x40, 0x26, 0xe3, 0x37,
	0xb0, 0x4f, 0xa3, 0xc5, 0x4c, 0x3e, 0x1a, 0x29, 0x83, 0x3a, 0x8d, 0x16, 0x13, 0x61, 0x34, 0x1d,
	0x74, 0x94, 0x91, 0x40, 0x30, 0x10, 0xed, 0x31, 0x12, 0x3a, 0xa4, 0x82, 0x7c, 0x0b, 0xaa, 0x68,
	0x59, 0x39, 0xc0, 0x6b, 0x1c, 0x26, 0xe6, 0xc9, 0x55, 0xc1, 0x92, 0x4e, 0x06, 0x13, 0x63, 0x8f,
	0x4b, 0x9d, 0xc0, 0xc4, 0x4c, 0x66, 0x30, 0xe1, 0x64, 0x30, 0x91, 0x1e, 0x59, 0xf8, 0x02, 0x26,
	0x1a, 0x90, 0xc1, 0x84, 0x13, 0x1d, 0x42, 0x99, 0xa5, 0x4a, 0xce, 0x86, 0xaa, 0x60, 0x36, 0x5f,
	0xd3, 0xab, 0x82, 0xc5, 0x1d, 0xe8, 0x3b, 0xa8, 0xf0, 0xd4, 0xfa, 0xd4, 0xe5, 0xb9, 0x48, 0xba,
	0x5b, 0xd6, 0xd2, 0x55, 0xc1, 0xe2, 0xa9, 0x1f, 0x51, 0xf7, 0xa2, 0x06, 0x55, 0x76, 0x53, 0x12,
	0x60, 0xb2, 0x34, 0x06, 0x00, 0xd7, 0x11, 0xf9, 0xcd, 0x63, 0xd5, 0x33, 0xd8, 0x9d, 0xa7, 0x87,
	0xab, 0xf6, 0xf8, 0x87, 0xdb, 0x74, 0x73, 0x89, 0x3e, 0x83, 0xc6, 0x85, 0x39, 0x30, 0xad, 0x61,
	0x7f, 0x6a, 0xbe, 0x1e, 0xf7, 0x5e, 0xe9, 0x05, 0xb4, 0x0f, 0xf0, 0xd6, 0x32, 0xa7, 0xc3, 0xd9,
	0xeb, 0xf1, 0xab, 0x9f, 0xf5, 0x22, 0x6a, 0x40, 0xd5, 0x1a, 0xf6, 0x06, 0x62, 0xa9, 0x1c, 0x0f,
	0x40, 0x93, 0x42, 0x23, 0x00, 0x75, 0x30, 0x1c, 0xf5, 0xc6, 0x03, 0xbd, 0xc0, 0xbe, 0x27, 0x6f,
	0xae, 0xaf, 0x79, 0x04, 0x80, 0x3a, 0xed, 0x59, 0x97, 0xc3, 0xa9, 0xae, 0xa0, 0x0a, 0x94, 0x47,
	0x17, 0x6f, 0x26, 0x7a, 0x09, 0xd5, 0x40, 0x63, 0x5f, 0xa3, 0xc9, 0xa5, 0x5e, 0x3e, 0xfb, 0x47,
	0x05, 0x4d, 0x66, 0x14, 0x9d, 0x40, 0x7d, 0x4c, 0x62, 0x6f, 0xb9, 0x91, 0x93, 0x3e, 0x9b, 0xa6,
	0x56, 0x83, 0x2f, 0x92, 0xa7, 0xdb, 0x28, 0xa4, 0x68, 0xf9, 0x68, 0x66, 0xb3, 0xb5, 0x8d, 0x7e,
	0x0e, 0x8d, 0xeb, 0x88, 0x84, 0x84, 0xe2, 0x47, 0x6d, 0x9e, 0xc2, 0x1f, 0xb5, 0xfb, 0x39, 0xd4,
	0x27, 0x78, 0x85, 0x17, 0x71, 0x0e, 0x2d, 0x4a, 0xa2, 0xf5, 0x79, 0x32, 0xb3, 0xb3, 0xff, 0x3d,
	0xb2, 0x41, 0x39, 0x46, 0xff, 0x11, 0x74, 0xc4, 0xff, 0x48, 0x30, 0x63, 0x1e, 0xbf, 0x45, 0xe9,
	0x05, 0x1c, 0x4c, 0xd6, 0x73, 0xba, 0x88, 0xbc, 0x79, 0x72, 0x65, 0xf9, 0x78, 0x88, 0x9e, 0x6b,
	0x65, 0x05, 0x30, 0x0a, 0x2f, 0x8a, 0xb9, 0x08, 0x79, 0x8f, 0xfb, 0x22, 0x84, 0x8b, 0x47, 0x9c,
	0x40, 0xe3, 0x36, 0x82, 0xcf, 0xd6, 0xb4, 0xca, 0x5b, 0xb9, 0x5a, 0xe6, 0xe8, 0x0e, 0x68, 0x13,
	0x1c, 0x38, 0xac, 0xbf, 0x73, 0xce, 0x6d, 0xee, 0x47, 0x50, 0xed, 0xaf, 0x08, 0xdd, 0xda, 0x73,
	0x0b, 0xf8, 0x3d, 0xe8, 0xb7, 0x04, 0x64, 0x35, 0xa3, 0xdc, 0x14, 0x62, 0xa3, 0xac, 0x75, 0x90,
	0xb5, 0x24, 0x6c, 0x5e, 0x82, 0xfe, 0x23, 0x89, 0x6e, 0xec, 0xc8, 0x99, 0x92, 0x24, 0xf4, 0x2e,
	0xf0, 0xbe, 0x44, 0x23, 0xce, 0x4c, 0xc8, 0x96, 0xbc, 0x5a, 0x79, 0x99, 0x1e, 0x0c, 0x12, 0xca,
	0x3d, 0x32, 0xe8, 0x25, 0xe8, 0x3c, 0xa8, 0xb7, 0x5a, 0x49, 0x0c, 0x95, 0xfc, 0xd2, 0xe6, 0xdf,
	0x8a, 0xba, 0x68, 0xff, 0xf2, 0xd4, 0xf5, 0xe2, 0x77, 0xeb, 0x79, 0x77, 0x41, 0xfc, 0x53, 0x39,
	0x3f, 0x93, 0xdf, 0x99, 0x1d, 0x7a, 0x73, 0x95, 0x3f, 0xcf, 0xe7, 0xff, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x69, 0xc4, 0x9c, 0xcd, 0x92, 0x0b, 0x00, 0x00,
}
